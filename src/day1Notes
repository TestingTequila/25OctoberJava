Variables: Variables are like boxes/jars/containers that are made to store/hold something
Syntax of Variable:

1. dataType variableName = variableValue;

2. dataType variableName;
   variableName = variableValue;
===========================================================================================
Two types of data Types:
--Primitive data Types
  a) We know in advance how much space they will occupy
  b) We don't need objects in order to use them
  Integer Family--byte[1], short[2], int[4], long[8], Floating point family-->float[4], double[8]
                  char[], boolean[]

--Non-primitive data types
    a) We don't know in advance how much space they will occupy
    b) We need objects in order to use them
===============================================================================
1. byte and short should not be used for mathematical operations and will also not be allowed by JVM
2. char will start behaving like a number if you perform mathematical operations over it
==========================================STATEMENTS=============================
Whenever we have to make decisions, we use statements
//If Statement
        if(condition)
        {
          this will execute only if condition is true
        }
In Multiple if statement, all the conditions will be verified even if any condition is true


//If-else Statement
        if(condition)
        {
          this will execute only if condition is true
        }
        else
        {
           this will execute only if condition is false
        }

// In multiple ifs with else, else part will always execute if the last condition before else part is false
// In multiple else if statement, once the condition is true, it will not bother to check other conditions
// Use switch for exact value match. Will not work for range >, <, =>, =< etc. For such, if else or is-else if is preferred
   switch can be used on Strings and all integer members except long [String, char, byte, short, int]

==============Loops=================================
-Repetitive Tasks
  -while loop
   int i=value;
   while(condition)
   {
      this will execute only if condition is true;
      I/D;
   }

  -for loop
     for(int i=value;condition;I/D)
     {
        this will execute only if condition is true;
     }

     We should use while loop under below scenario:
     when the number of iterations is not fixed
     infinite loading
     waiting for any page element
     calender handling
     pagination

  -advanced for loop

==========================ARRAYS===========================
To hold multiple values
li= 0
size of an array = nameOfArray.length
hi=size-1


======
12 values
li=0;
hi=11

==============
Arrays can be handled by using
1. while loop
2. for loop
3. advanced for loop
4. Arrays.toString(NameOfArray) -- Only for display or print purpose

================================
A class is just like a Template
Object: Every copy of the template is known as its object

=> A class is a template and every copy of that template is known as its object
To create Object of a class:
ClassNameWhoseObjectWeWantToCreate aliasName = new ClassNameWhoseObjectWeWantToCreate();

===================Class Date [27th Nov]=======================================================
Heap and Stack memory

Methods:

-Statements and loops
-Array/Collection
-Methods
 accessModifier[public/private/protected] returnType[void/DataType] methodName(can/t parameters)
 {
    Action over class variable/s;
 }

 //If there is anything apart from void, this must always be accompanied by return keyword at the end of the code
 // Whenever we want to do further calculation/manipulation over the result of a method, the method should have return Type

-OOPS Concept:
   -PolyMorphism
      -Method Overloading(compile time polymorphism)
      -Method Overriding(Run Time Polymorphism)

 Method Overloading(Compile Time Polymorphism):In a class you can have two or more methods with the same name provided, the parameters are different
 Ways to make parameters different:
 1- By changing the data types of parameters
 2- By changing the order of parameters
 3- By changing the count of parameters

 Return type has no impact on method overloading concept

 We can overload main method but JVM will always call default main method.

 Method overloading happens within the same class.

 STATIC:
 CMA, permanent generation, metaspace : All the are same name for the memory that stores static variables or methods

 static does not belong to Object, rather it belongs to the class
 what is static should be called using Class Name, since it belongs to class and not the objects.

 Call Static variable/method using class name
 Call non-static variable or method with help of object reference variable
 If static or non static are part of same memory or object, you can call them directly as well

 Local variable can never be static.

 // To initialize(assign value) the global variables of the class. To assign default values to the global variables of the class
 -global Variables: Its the responsibility of the constructor to assign default value to me
 -Parameter     : the moment method is called, i will receive the value
 -local Variable: the moment i am created, i will be assigned a value


accessModifier  sameAsNameOfTheClass()
{
   initializes the class variables/global variables
}

accessModifier  sameAsNameOfTheClass(can have parameters)
{
   action over class variables
}

An object will always call the constructor of the class first

Through constructors, we can assign value to global variables and then this global variables can be used in methods to perform actions

//ENCAPSULATION:
1. variables and methods should be created within the class only
2. Ensure the variables are private
3. You assign value to these variables with the help of methods [setter and getter methods]

a) variable private : name
    setting its value through setter method :setName() : Kerrie
    getting its value through getter method : getName()

b) variable is private
   setting its value with constructor : Kerrie
   getting its value through getter method: getName();

c) variable is private
   setting its value with constructor : Kerrie
   updating the value through setter method: Jason
   getting its value through getter method: Jason

d) private method withing Public method

//Constructor Vs Setter Method Usages
1. Through setter method, we can set value of only one variable at a time
   Through constructor, we can set more than one value at a time.

2. We can use setter method to update the value of private variables, whereas same can't be done using Constructor
   Setter method can be used for setting the value as well as for updating the value
   But Constructor is only and only used for initializing the value of a variable.

3. Ideally, both setter and Constructors are used for setting the value of global variable/s and we shouldn't be applying login within them...

Usages of 'This'  keyword:
1. Global Variable and parameter are same name, we use this keyword to call global variables.
2. Builder Pattern, calling the object of the same class
3. To call one constructor into other constructor
4. To call one method within other method.

Usages of final keyword:
1- variable/methods with final keyword cannot be overridden
2- class with final keyword cannot be inherited(they can never be parent class)

--> Static methods can be inherited but can't be overridden and if the same static method exists in child class
    this is completely different method from parent class static method and is not overridden and this concept is known
    as method hiding.

--> Multiple inheritance is not possible among classes but is possible using interface
 --> A class cannot inherit from Multiple classes but a class can inherit from Multiple interfaces